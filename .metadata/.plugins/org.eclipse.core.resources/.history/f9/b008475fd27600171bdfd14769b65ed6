/**
 * 
 */
package com.valbo.data.service;

import java.net.URI;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.http.client.utils.URIBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.valbo.data.model.GoogleGeoCodeResponse;
import com.valbo.data.model.Location;

/**
 * @author mdodia
 *
 */
@Service
public class AddressService {

	@Value("${google.geocode.key}")
	private String googleGeoCodeKey;

	@Value("${google.geocode.url}")
	private String googleGeoCodeURI;

	public GoogleGeoCodeResponse getGEOCodedAddress(List<String> geoCodes) {

		String coordinates = geoCodes.get(0) + ","
				+ geoCodes.get(1);
		//String uri = googleGeoCodeURL + "?" + "latlng=" + geoCodeURI + "&" + "key=" + googleGeoCodeKey;
		Map <String, String> uriParams = new HashMap<String, String> ();
		uriParams.put("latlng", coordinates);
		uriParams.put("key", googleGeoCodeKey);
		
		UriComponents uri = UriComponentsBuilder.fromPath(googleGeoCodeURI).buildAndExpand(uriParams);
		
//		URIBuilder builder = URIBuilder.fromPath(webServiceURI).queryParam("address", childURL).queryParam("key", key);
//		URI serviceURI = builder.build();
//		WebTarget webTarget = client.target(serviceURI);
		return getGeoLocation (uri.toUriString());
	}

	private GoogleGeoCodeResponse getGeoLocation (String url) {
		
		RestTemplate restTemplate = new RestTemplate();
		GoogleGeoCodeResponse response = restTemplate.getForObject(url, GoogleGeoCodeResponse.class);
		
		return response;
	}

}
