/**
 * 
 */
package com.ncr.location.service.test;

import java.util.List;

import org.assertj.core.api.AssertFactory;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.util.Assert;

import com.ncr.location.model.GeoLocationResponse;
import com.ncr.location.model.GoogleGeoCodeResponse;
import com.ncr.location.repository.LocationRepository;
import com.ncr.location.service.AddressService;

/**
 * @author mdodia
 *
 */

@RunWith(SpringRunner.class)
@SpringBootTest
public class AddressServiceTest {
	
	@Autowired
    private AddressService addressService;
 
    @Test
    public void testGetGEOLocationResponse() {
    	
    	GeoLocationResponse response = new GeoLocationResponse();
    	response.setLatitude("33.969601");
    	response.setLongitude("-84.100033");
    	
    	GeoLocationResponse testResponse = null;
		try {
			testResponse = addressService.getGEOLocationResponse(response);
		} catch (Exception e) {
			
			e.printStackTrace();
			
		}

    	Object[] elements = new Object [2];
    	elements[0] = testResponse; 
    	elements[1] = testResponse.getAddress();  
    	
    	Assert.noNullElements(elements, "Key Response elements are null");
    	Assert.isTrue(testResponse.getAddress().equals("2651 Satellite Blvd, Duluth, GA 30096, USA"), "Address should be the NCR location");
    }
    
    @Test
    public void testGetCachedEntries1() {
    	
    	GeoLocationResponse response = new GeoLocationResponse();
    	response.setLatitude("33.969601");
    	response.setLongitude("-84.100033");
    	
    	GeoLocationResponse testResponse = null;
		try {
			testResponse = addressService.getGEOLocationResponse(response);
		} catch (Exception e) {
			
			e.printStackTrace();
			
		}
    	List<GeoLocationResponse> cachedEntries = addressService.getCachedEntries();

    	Object[] elements = new Object [2];
    	elements[0] = cachedEntries; 
    	elements[1] = cachedEntries.get(0);  
    	
    	Assert.noNullElements(elements, "Key Response elements are null");
    	
    	Assert.isTrue(cachedEntries.size() == 1, "Cache should have size 1");
    	Assert.isTrue(cachedEntries.get(0).getAddress().equals("2651 Satellite Blvd, Duluth, GA 30096, USA"), "Address should be the NCR location");
    }
    
    @Test
    public void testGetCachedEntries2() {
    	
    	GeoLocationResponse response = new GeoLocationResponse();
    	response.setLatitude("33.969601");
    	response.setLongitude("-84.100033");
    	
    	GeoLocationResponse testResponse = null;
		try {
			testResponse = addressService.getGEOLocationResponse(response);
		} catch (Exception e) {
			
			e.printStackTrace();
			
		}
    	List<GeoLocationResponse> cachedEntries = addressService.getCachedEntries();

    	Object[] elements = new Object [2];
    	elements[0] = cachedEntries; 
    	elements[1] = cachedEntries.get(0);  
    	
    	Assert.noNullElements(elements, "Key Response elements are null");
    	
    	Assert.isTrue(cachedEntries.size() == 1, "Cache should have size 1");
    	Assert.isTrue(cachedEntries.get(0).getAddress().equals("2651 Satellite Blvd, Duluth, GA 30096, USA"), "Address should be the NCR location");
    }


}
