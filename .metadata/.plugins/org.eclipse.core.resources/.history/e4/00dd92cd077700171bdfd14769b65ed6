/**
 * 
 */
package com.ncr.location.repository;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.ncr.location.config.SHA1KeyGenerator;
import com.ncr.location.model.GeoLocationResponse;
import com.ncr.location.model.GoogleGeoCodeResponse;

import net.sf.ehcache.Cache;
import net.sf.ehcache.Ehcache;

/**
 * @author mdodia
 *
 */
@Component
public class LocationRepositoryImpl implements LocationRepository {

	@Value("${google.geocode.key}")
	private String googleGeoCodeKey;

	@Value("${google.geocode.url}")
	private String googleGeoCodeURI;
	
//	@Autowired
//	private net.sf.ehcache.Cache cache;
	@Autowired
	private CacheManager cacheManager;

	@Override
	@Cacheable(cacheNames = "location", keyGenerator = "SHA1KeyGenerator")
	public GoogleGeoCodeResponse getLocationDetails(GeoLocationResponse location) {

		String coordinates = location.getLatitude() + "," + location.getLongitude();

		MultiValueMap<String, String> uriParams = new LinkedMultiValueMap<String, String>();
		uriParams.add("latlng", coordinates);
		uriParams.add("key", googleGeoCodeKey);

		UriComponentsBuilder uri = UriComponentsBuilder.fromUriString(googleGeoCodeURI).queryParams(uriParams);

		RestTemplate restTemplate = new RestTemplate();
		GoogleGeoCodeResponse response = restTemplate.getForObject(uri.toUriString(), GoogleGeoCodeResponse.class);

		return response;

	}

	@Override
	public List<GeoLocationResponse> getCachedLocations() {

		org.springframework.cache.Cache cache = cacheManager.getCache("location");
		cacheManager.getCacheNames();
		cacheManager.getCache("location").getNativeCache();
		
//		net.sf.ehcache.CacheManager cacheManager = net.sf.ehcache.CacheManager.getInstance();
//		Cache cache = cacheManager.getCache("location");
//		net.sf.ehcache.Ecache cache = 
//		for (Object key : cache.getKeys()) {
//			Element element = cache.get(key);
//			if (element != null && element.getObjectValue().equals(o)) {
//				return true;
//			}
//		}
//		return false;
		List<GeoLocationResponse> list = new ArrayList<GeoLocationResponse>();
		return list;
	}

}
