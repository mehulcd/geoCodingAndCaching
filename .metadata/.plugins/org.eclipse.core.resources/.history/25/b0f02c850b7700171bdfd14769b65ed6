/**
 * 
 */
package com.ncr.location.service;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import javax.xml.bind.DatatypeConverter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.ncr.location.model.GeoLocationResponse;
import com.ncr.location.model.GoogleGeoCodeResponse;
import com.ncr.location.repository.LocationRepository;

/**
 * @author mdodia
 *
 */
@Service
public class AddressService {

	@Value("${google.geocode.key}")
	private String googleGeoCodeKey;

	@Value("${google.geocode.url}")
	private String googleGeoCodeURI;
	
	@Autowired
	private LocationRepository locationRepositoryImpl;

	public GoogleGeoCodeResponse getGEOCodedAddress(GeoLocationResponse location) {

		return locationRepositoryImpl.getLocationDetails(location);
	}

	public GeoLocationResponse getGEOLocationResponse(GeoLocationResponse location) {

		GoogleGeoCodeResponse response = locationRepositoryImpl.getLocationDetails(location);
		GeoLocationResponse formattedResponse = null;
		for (GoogleGeoCodeResponse.Results result : response.results) {
			if (null != result.geometry) {

				if ("ROOFTOP".equals(result.geometry.location_type)) {
					formattedResponse = new GeoLocationResponse();
					formattedResponse.setLatitude(result.geometry.location.lat);
					formattedResponse.setLongitude(result.geometry.location.lng);
					formattedResponse.setAddress(result.formatted_address);
					formattedResponse.setLookUpTimeStamp(new java.util.Date());
					formattedResponse.setMatchType("EXACT");
					formattedResponse.setTimestamp(new java.util.Date());
					//formattedResponse.setSha1key(getSHA1 (formattedResponse.getLatitude(), formattedResponse.getLongitude()));
					break;
				}
			}
		}

		if (null == formattedResponse) {
			for (GoogleGeoCodeResponse.Results result : response.results) {
				if (null != result.geometry) {

					formattedResponse = new GeoLocationResponse();
					formattedResponse.setLatitude(result.geometry.location.lat);
					formattedResponse.setLongitude(result.geometry.location.lng);
					formattedResponse.setAddress(result.formatted_address);
					formattedResponse.setLookUpTimeStamp(new java.util.Date());
					formattedResponse.setMatchType("APPROXIMATE");
					formattedResponse.setTimestamp(new java.util.Date());
					//formattedResponse.setSha1key(getSHA1 (formattedResponse.getLatitude(), formattedResponse.getLongitude()));
					break;
				}
			}
		}
		return formattedResponse;
	}
	
	public List<GeoLocationResponse> getCachedEntries() {

		return locationRepositoryImpl.getCachedLocations();
	}
	

}
